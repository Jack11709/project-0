"use strict";$(function(){function e(){x?(P=$(".track1.player").index(),console.log(P),P>=21&&(alert("Player 1 wins!"),y.addClass("player"),c.text("hide"),$(".controller").addClass("hide"))):x||(P=$(".track2.player").index(),console.log(P),P>=21&&(alert("Player 2 wins!"),u.addClass("player"),c.addClass("hide"),$(".controller").addClass("hide")))}function a(){x?(l(),x=!1,h=$(".track2"),c.text("Player 2's Turn")):x||(l(),x=!0,h=$(".track1"),c.text("Player 1's Turn"))}function l(){x?(P=$(".track1.player").index(),f>0?r():0===f&&(t(),f=2)):x||(P=$(".track2.player").index(),k>0?r():0===k&&(t(),k=2))}function r(){h.eq(P).removeClass("player"),h.eq(P+(Math.floor(3*Math.random())+1)).addClass("player"),e()}function t(){h.eq(P).removeClass("player"),h.eq(P+5).addClass("player"),e()}function s(){0===C?(C=2,x=!0,P=$(".track1.player").index(),c.text("Player 2 has been salted! Player 1 moves again!"),r()):0===p&&(p=2,c.text("Player 1 has been salted! Player 2 moves again!"),P=$(".track2.player").index(),r())}var n=$(".start"),o=$(".move"),d=$(".boost"),i=$(".salt"),c=$(".turn"),y=$(".finish1"),u=$(".finish2"),h=$(".track1"),x=!0,f=1,k=1,C=1,p=1,P=null;o.on("click",a),d.on("click",function(){x?1===f?(f=0,a()):2===f&&c.text("Player 1 boost already used!"):x||(1===k?(k=0,a()):2===k&&c.text("Player 2 boost already used!"))}),i.on("click",function(){x?1===C?(C=0,s()):2===C&&c.text("Player 1 has already used Salt!"):x||(1===p?(p=0,s()):2===p&&c.text("Player 2 has already used Salt!"))}),n.on("click",function(){$(".instructions").addClass("hide"),$(".board").removeClass("hide"),$(".controller").removeClass("hide"),$(".feedback").removeClass("hide")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
