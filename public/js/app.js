"use strict";$(function(){function a(){(N=H?$(".track1.player").index():$(".track2.player").index())>=21&&(e(),(H?b:S).addClass("player winner"),H?($(".playerOneWin").removeClass("hide"),$(".aiWin").addClass("hide")):R?$(".aiWin").removeClass("hide"):$(".playerTwoWin").removeClass("hide"))}function e(){E.play(),g.addClass("hide"),W.addClass("hide"),w.removeClass("hide"),T.removeClass("hide")}function l(){r(),F=H?$(".track2"):$(".track1"),q.text(H?"Player 2's Turn":"Player 1's Turn"),H=!H}function r(){N=H?$(".track1.player").index():$(".track2.player").index(),H?I>0?(z.play(),s()):0===I&&(t(),I=2):J>0?(A.play(),s()):0===J&&(t(),J=2)}function s(){R?R&&(z.play(),q.text("Player 1 get's moving!"),F.eq(N).removeClass("player"),F.eq(N+(Math.floor(3*Math.random())+1)).addClass("player"),a(),(N=$(".track1.player").index())<21&&c()):(F.eq(N).removeClass("player"),F.eq(N+(Math.floor(3*Math.random())+1)).addClass("player"),a())}function t(){R?(_.play(),F.eq(N).removeClass("player"),F.eq(N+5).addClass("player"),a(),(N=$(".track1.player").index())<21&&c()):(F.eq(N).removeClass("player"),F.eq(N+5).addClass("player"),a())}function n(){R?R&&0===K&&(H=!0,F=$(".track1"),N=$(".track1.player").index(),q.text("Mecha Gary has been salted!   Player 1 moves again!"),F.eq(N).removeClass("player"),F.eq(N+(Math.floor(3*Math.random())+1)).addClass("player"),K=2,a()):0===K?(K=2,H=!0,N=$(".track1.player").index(),q.text("Player 2 has been salted! Player 1 moves again!"),s()):0===L&&(L=2,q.text("Player 1 has been salted!   Player 2 moves again!"),N=$(".track2.player").index(),s())}function o(){q.text("Mecha Gary has salted you, he moves again!"),j.play(),L=2,F.eq(N).removeClass("player"),F.eq(N+(Math.floor(3*Math.random())+1)).addClass("player"),setTimeout(function(){i()},1e3),H=!1,a(),H=!0}function d(){_.play(),F.eq(N).removeClass("player"),F.eq(N+5).addClass("player"),q.text("Mecha Gary has boosted!   Player 1's turn "),H=!1,J=2,a(),H=!0}function i(){A.play(),F.eq(N).removeClass("player"),F.eq(N+(Math.floor(3*Math.random())+1)).addClass("player"),q.text("Mecha Gary has made his move!   Player 1's turn"),H=!1,a(),H=!0}function y(){N=$(".track1.player").index(),Q=N}function c(){y(),F=$(".track2"),N=$(".track2.player").index(),setTimeout(function(){Q<=4?i():Q>4&&Q<15?(U=Math.floor(5*Math.random())+1,U<=2?i():U>2&&U<=4&&1===J?d():U>2&&U<=4&&2===I?i():5===U&&1===L?o():5===U&&2===L&&i()):Q>=15&&(U=Math.floor(5*Math.random())+1,U<=3&&1===J?d():U<=3&&2===J&&1===L?o():U<=3&&2===J&&2===K?i():U>3&&1===K?o():i())},1e3)}function p(){R?(F=$(".track1"),N=$(".track1.player").index(),s()):l()}function u(){R?1===I?(F=$(".track1"),N=$(".track1.player").index(),I=2,q.text("Player 1 uses boost!"),t()):2===I&&(D.play(),q.text("Player 1 has already used boost!")):H?1===I?(_.play(),I=0,l()):2===I&&(D.play(),q.text("Player 1 boost already used!")):1===J?(_.play(),J=0,l()):2===J&&(D.play(),q.text("Player 2 boost already used!"))}function h(){R?1===K?(K=0,j.play(),n()):2===K&&(D.play(),q.text("Player 1 has already used Salt!")):H?1===K?(j.play(),K=0,n()):2===K&&(D.play(),q.text("Player 1 has already used Salt!")):1===L?(j.play(),L=0,n()):2===L&&(D.play(),q.text("Player 2 has already used Salt!"))}function m(){G.addClass("hide"),B.removeClass("hide"),W.removeClass("hide"),g.removeClass("hide"),O.play()}function C(){f(),R?$(".aiWin").addClass("hide"):$(".playerTwoWin").addClass("hide")}function f(){$(".track1").removeClass("player winner"),$(".start1").addClass("player"),I=1,K=1,$(".track2").removeClass("player winner"),$(".start2").addClass("player"),J=1,L=1,Q=null,$(".controller").removeClass("hide"),$(".feedback").removeClass("hide"),$(".resultBox").addClass("hide"),$(".playerOneWin").addClass("hide"),O.src="",O.src="sounds/closing_theme.mp3",O.play()}var v=$(".startbtn2"),k=$(".startbtn1"),x=$(".move"),M=$(".boost"),P=$(".salt"),q=$(".turn"),b=$(".finish1"),S=$(".finish2"),g=$(".feedback"),W=$(".controller"),w=$(".reset"),T=$(".resultBox"),G=$(".instructions"),B=$(".board"),O=$(".theme")[0];O.src="sounds/closing_theme.mp3";var _=$(".boostSound")[0],j=$(".saltSound")[0],z=$(".moveSound")[0],A=$(".moveSound2")[0],D=$(".errorSound")[0],E=$(".winSound")[0],F=$(".track1"),H=!0,I=1,J=1,K=1,L=1,N=null,Q=null,R=!1,U=null;x.on("click",p),M.on("click",u),P.on("click",h),v.on("click",function(){m()}),k.on("click",function(){R=!0,m(),q.text("Make your first move!")}),w.on("click",C)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
